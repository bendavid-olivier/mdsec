/*******************************************************************************
 * Pattern builder for pattern policy.userOperation
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.userOperation
 */
public class PatternBuilderForuserOperation implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.userOperation".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.userOperation");
		
		final Address<? extends Receiver> var_234 = buildable.patternCollector("policy.userOperation");
		final Stub<Address<? extends Supplier>> var_235 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_236 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("PolicyElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_237 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OPERATIONNAME"}), var_236);
		final TupleMask var_238 = new TupleMask(new int[] {}, 0);
		final TupleMask var_239 = new TupleMask(new int[] {}, 2);
		final TupleMask var_240 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_241 = buildable.buildBetaNode(var_235, var_237, var_238, var_239, var_240, false);
		final Stub<Address<? extends Supplier>> var_242 = buildable.buildInjectivityChecker(var_241, 0, new int[] {1});
		final Object var_243 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_244 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_243);
		final TupleMask var_245 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_246 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_247 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_248 = buildable.buildBetaNode(var_242, var_244, var_245, var_246, var_247, false);
		final Stub<Address<? extends Supplier>> var_249 = buildable.buildInjectivityChecker(var_248, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_250 = buildable.buildInjectivityChecker(var_249, 1, new int[] {2});
		final Object var_251 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_252 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_251);
		final TupleMask var_253 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_254 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_255 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_256 = buildable.buildBetaNode(var_250, var_252, var_253, var_254, var_255, false);
		final Stub<Address<? extends Supplier>> var_257 = buildable.buildInjectivityChecker(var_256, 0, new int[] {3});
		final Stub<Address<? extends Supplier>> var_258 = buildable.buildInjectivityChecker(var_257, 1, new int[] {3});
		final Stub<Address<? extends Supplier>> var_259 = buildable.buildInjectivityChecker(var_258, 2, new int[] {3});
		final Object var_260 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_261 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_260);
		final TupleMask var_262 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_263 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_264 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_265 = buildable.buildBetaNode(var_259, var_261, var_262, var_263, var_264, false);
		final Stub<Address<? extends Supplier>> var_266 = buildable.buildInjectivityChecker(var_265, 0, new int[] {4});
		final Stub<Address<? extends Supplier>> var_267 = buildable.buildInjectivityChecker(var_266, 1, new int[] {4});
		final Stub<Address<? extends Supplier>> var_268 = buildable.buildInjectivityChecker(var_267, 2, new int[] {4});
		final Stub<Address<? extends Supplier>> var_269 = buildable.buildInjectivityChecker(var_268, 3, new int[] {4});
		final TupleMask var_270 = new TupleMask(new int[] {4, 1}, 5);
		final Stub<Address<? extends Supplier>> var_271 = buildable.buildTrimmer(var_269, var_270);
		buildable.buildConnection(var_271, var_234);
		return var_234;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.userOperation".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("OPERATIONNAME", 1);

		}
		return posMapping;
	}
}
