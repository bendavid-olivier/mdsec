/*******************************************************************************
 * Pattern builder for pattern policy.dsod
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.dsod
 */
public class PatternBuilderFordsod implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.dsod".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.dsod");
		
		final Address<? extends Receiver> var_607 = buildable.patternCollector("policy.dsod");
		final Stub<Address<? extends Supplier>> var_608 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_609 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Role"))).getEStructuralFeature("dsod");
		final Stub<Address<? extends Supplier>> var_610 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLEA", "ROLEB"}), var_609);
		final TupleMask var_611 = new TupleMask(new int[] {}, 0);
		final TupleMask var_612 = new TupleMask(new int[] {}, 2);
		final TupleMask var_613 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_614 = buildable.buildBetaNode(var_608, var_610, var_611, var_612, var_613, false);
		final Stub<Address<? extends Supplier>> var_615 = buildable.buildInjectivityChecker(var_614, 0, new int[] {1});
		final Object var_616 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_617 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLEA"}), var_616);
		final TupleMask var_618 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_619 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_620 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_621 = buildable.buildBetaNode(var_615, var_617, var_618, var_619, var_620, false);
		final Stub<Address<? extends Supplier>> var_622 = buildable.buildInjectivityChecker(var_621, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_623 = buildable.buildInjectivityChecker(var_622, 1, new int[] {2});
		final Object var_624 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_625 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLEB"}), var_624);
		final TupleMask var_626 = new TupleMask(new int[] {1, 2}, 3);
		final TupleMask var_627 = new TupleMask(new int[] {1, 0}, 2);
		final TupleMask var_628 = new TupleMask(new int[] {}, 2);
		final Stub<Address<? extends Supplier>> var_629 = buildable.buildBetaNode(var_623, var_625, var_626, var_627, var_628, false);
		final TupleMask var_630 = new TupleMask(new int[] {2, 0, 1}, 3);
		final Stub<Address<? extends Supplier>> var_631 = buildable.buildTrimmer(var_629, var_630);
		buildable.buildConnection(var_631, var_607);
		return var_607;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.dsod".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("ROLEA", 1);
			posMapping.put("ROLEB", 2);

		}
		return posMapping;
	}
}
