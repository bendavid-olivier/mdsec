/*******************************************************************************
 * Pattern builder for pattern policy.userRoleRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.userRoleRule
 */
public class PatternBuilderForuserRoleRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.userRoleRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.userRoleRule");
		
		final Address<? extends Receiver> var_536 = buildable.patternCollector("policy.userRoleRule");
		final Stub<Address<? extends Supplier>> var_537 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_538 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_539 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_538);
		final TupleMask var_540 = new TupleMask(new int[] {}, 0);
		final TupleMask var_541 = new TupleMask(new int[] {}, 2);
		final TupleMask var_542 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_543 = buildable.buildBetaNode(var_537, var_539, var_540, var_541, var_542, false);
		final Stub<Address<? extends Supplier>> var_544 = buildable.buildInjectivityChecker(var_543, 1, new int[] {0});
		final Object var_545 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_546 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_545);
		final TupleMask var_547 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_548 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_549 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_550 = buildable.buildBetaNode(var_544, var_546, var_547, var_548, var_549, false);
		final Stub<Address<? extends Supplier>> var_551 = buildable.buildInjectivityChecker(var_550, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_552 = buildable.buildInjectivityChecker(var_551, 2, new int[] {0});
		final Object var_553 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_554 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_553);
		final TupleMask var_555 = new TupleMask(new int[] {0}, 3);
		final TupleMask var_556 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_557 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_558 = buildable.buildBetaNode(var_552, var_554, var_555, var_556, var_557, false);
		final Stub<Address<? extends Supplier>> var_559 = buildable.buildInjectivityChecker(var_558, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_560 = buildable.buildInjectivityChecker(var_559, 1, new int[] {3});
		final Stub<Address<? extends Supplier>> var_561 = buildable.buildInjectivityChecker(var_560, 0, new int[] {3});
		final Object var_562 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_563 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_562);
		final TupleMask var_564 = new TupleMask(new int[] {2}, 4);
		final TupleMask var_565 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_566 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_567 = buildable.buildBetaNode(var_561, var_563, var_564, var_565, var_566, false);
		final Stub<Address<? extends Supplier>> var_568 = buildable.buildInjectivityChecker(var_567, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_569 = buildable.buildInjectivityChecker(var_568, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_570 = buildable.buildInjectivityChecker(var_569, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_571 = buildable.buildInjectivityChecker(var_570, 4, new int[] {3});
		final TupleMask var_572 = new TupleMask(new int[] {3, 0, 2, 4}, 5);
		final Stub<Address<? extends Supplier>> var_573 = buildable.buildTrimmer(var_571, var_572);
		buildable.buildConnection(var_573, var_536);
		return var_536;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.userRoleRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("ROLE", 1);
			posMapping.put("OPERATION", 2);
			posMapping.put("OBJECT", 3);

		}
		return posMapping;
	}
}
