/*******************************************************************************
 * Pattern builder for pattern policy.userActivatedRoleRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.userActivatedRoleRule
 */
public class PatternBuilderForuserActivatedRoleRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.userActivatedRoleRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.userActivatedRoleRule");
		
		final Address<? extends Receiver> var_350 = buildable.patternCollector("policy.userActivatedRoleRule");
		final Stub<Address<? extends Supplier>> var_351 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_352 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Session"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_353 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"SESSION", "ROLE"}), var_352);
		final TupleMask var_354 = new TupleMask(new int[] {}, 0);
		final TupleMask var_355 = new TupleMask(new int[] {}, 2);
		final TupleMask var_356 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_357 = buildable.buildBetaNode(var_351, var_353, var_354, var_355, var_356, false);
		final Stub<Address<? extends Supplier>> var_358 = buildable.buildInjectivityChecker(var_357, 1, new int[] {0});
		final Object var_359 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_360 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_359);
		final TupleMask var_361 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_362 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_363 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_364 = buildable.buildBetaNode(var_358, var_360, var_361, var_362, var_363, false);
		final Stub<Address<? extends Supplier>> var_365 = buildable.buildInjectivityChecker(var_364, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_366 = buildable.buildInjectivityChecker(var_365, 2, new int[] {0});
		final Object var_367 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("session");
		final Stub<Address<? extends Supplier>> var_368 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "SESSION"}), var_367);
		final TupleMask var_369 = new TupleMask(new int[] {0}, 3);
		final TupleMask var_370 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_371 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_372 = buildable.buildBetaNode(var_366, var_368, var_369, var_370, var_371, false);
		final Stub<Address<? extends Supplier>> var_373 = buildable.buildInjectivityChecker(var_372, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_374 = buildable.buildInjectivityChecker(var_373, 1, new int[] {3});
		final Stub<Address<? extends Supplier>> var_375 = buildable.buildInjectivityChecker(var_374, 0, new int[] {3});
		final Object var_376 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_377 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_376);
		final TupleMask var_378 = new TupleMask(new int[] {3, 1}, 4);
		final TupleMask var_379 = new TupleMask(new int[] {0, 1}, 2);
		final TupleMask var_380 = new TupleMask(new int[] {}, 2);
		final Stub<Address<? extends Supplier>> var_381 = buildable.buildBetaNode(var_375, var_377, var_378, var_379, var_380, false);
		final Object var_382 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_383 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_382);
		final TupleMask var_384 = new TupleMask(new int[] {2}, 4);
		final TupleMask var_385 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_386 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_387 = buildable.buildBetaNode(var_381, var_383, var_384, var_385, var_386, false);
		final Stub<Address<? extends Supplier>> var_388 = buildable.buildInjectivityChecker(var_387, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_389 = buildable.buildInjectivityChecker(var_388, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_390 = buildable.buildInjectivityChecker(var_389, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_391 = buildable.buildInjectivityChecker(var_390, 4, new int[] {3});
		final Object var_392 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_393 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_392);
		final TupleMask var_394 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_395 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_396 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_397 = buildable.buildBetaNode(var_391, var_393, var_394, var_395, var_396, false);
		final Stub<Address<? extends Supplier>> var_398 = buildable.buildInjectivityChecker(var_397, 5, new int[] {4});
		final Stub<Address<? extends Supplier>> var_399 = buildable.buildInjectivityChecker(var_398, 5, new int[] {2});
		final Stub<Address<? extends Supplier>> var_400 = buildable.buildInjectivityChecker(var_399, 5, new int[] {1});
		final Stub<Address<? extends Supplier>> var_401 = buildable.buildInjectivityChecker(var_400, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_402 = buildable.buildInjectivityChecker(var_401, 5, new int[] {3});
		final TupleMask var_403 = new TupleMask(new int[] {3, 1, 4, 5}, 6);
		final Stub<Address<? extends Supplier>> var_404 = buildable.buildTrimmer(var_402, var_403);
		buildable.buildConnection(var_404, var_350);
		return var_350;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.userActivatedRoleRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("ROLE", 1);
			posMapping.put("OPERATION", 2);
			posMapping.put("OBJECT", 3);

		}
		return posMapping;
	}
}
