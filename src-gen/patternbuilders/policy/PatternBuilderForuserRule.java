/*******************************************************************************
 * Pattern builder for pattern policy.userRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.userRule
 */
public class PatternBuilderForuserRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.userRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.userRule");
		
		final Address<? extends Receiver> var_97 = buildable.patternCollector("policy.userRule");
		final Stub<Address<? extends Supplier>> var_98 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_99 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_100 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_99);
		final TupleMask var_101 = new TupleMask(new int[] {}, 0);
		final TupleMask var_102 = new TupleMask(new int[] {}, 2);
		final TupleMask var_103 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_104 = buildable.buildBetaNode(var_98, var_100, var_101, var_102, var_103, false);
		final Stub<Address<? extends Supplier>> var_105 = buildable.buildInjectivityChecker(var_104, 1, new int[] {0});
		final Object var_106 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_107 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_106);
		final TupleMask var_108 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_109 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_110 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_111 = buildable.buildBetaNode(var_105, var_107, var_108, var_109, var_110, false);
		final Stub<Address<? extends Supplier>> var_112 = buildable.buildInjectivityChecker(var_111, 1, new int[] {2});
		final Stub<Address<? extends Supplier>> var_113 = buildable.buildInjectivityChecker(var_112, 0, new int[] {2});
		final Object var_114 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_115 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_114);
		final TupleMask var_116 = new TupleMask(new int[] {1}, 3);
		final TupleMask var_117 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_118 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_119 = buildable.buildBetaNode(var_113, var_115, var_116, var_117, var_118, false);
		final Stub<Address<? extends Supplier>> var_120 = buildable.buildInjectivityChecker(var_119, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_121 = buildable.buildInjectivityChecker(var_120, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_122 = buildable.buildInjectivityChecker(var_121, 3, new int[] {2});
		final Object var_123 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_124 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_123);
		final TupleMask var_125 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_126 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_127 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_128 = buildable.buildBetaNode(var_122, var_124, var_125, var_126, var_127, false);
		final Stub<Address<? extends Supplier>> var_129 = buildable.buildInjectivityChecker(var_128, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_130 = buildable.buildInjectivityChecker(var_129, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_131 = buildable.buildInjectivityChecker(var_130, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_132 = buildable.buildInjectivityChecker(var_131, 4, new int[] {2});
		final TupleMask var_133 = new TupleMask(new int[] {2, 3, 4}, 5);
		final Stub<Address<? extends Supplier>> var_134 = buildable.buildTrimmer(var_132, var_133);
		buildable.buildConnection(var_134, var_97);
		return var_97;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.userRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("OPERATION", 1);
			posMapping.put("OBJECT", 2);

		}
		return posMapping;
	}
}
