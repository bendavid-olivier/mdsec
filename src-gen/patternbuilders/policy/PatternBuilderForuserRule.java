/*******************************************************************************
 * Pattern builder for pattern policy.userRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.userRule
 */
public class PatternBuilderForuserRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.userRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.userRule");
		
		final Address<? extends Receiver> var_126 = buildable.patternCollector("policy.userRule");
		final Stub<Address<? extends Supplier>> var_127 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_128 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_129 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_128);
		final TupleMask var_130 = new TupleMask(new int[] {}, 0);
		final TupleMask var_131 = new TupleMask(new int[] {}, 2);
		final TupleMask var_132 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_133 = buildable.buildBetaNode(var_127, var_129, var_130, var_131, var_132, false);
		final Stub<Address<? extends Supplier>> var_134 = buildable.buildInjectivityChecker(var_133, 1, new int[] {0});
		final Object var_135 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_136 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_135);
		final TupleMask var_137 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_138 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_139 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_140 = buildable.buildBetaNode(var_134, var_136, var_137, var_138, var_139, false);
		final Stub<Address<? extends Supplier>> var_141 = buildable.buildInjectivityChecker(var_140, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_142 = buildable.buildInjectivityChecker(var_141, 2, new int[] {0});
		final Object var_143 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_144 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_143);
		final TupleMask var_145 = new TupleMask(new int[] {0}, 3);
		final TupleMask var_146 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_147 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_148 = buildable.buildBetaNode(var_142, var_144, var_145, var_146, var_147, false);
		final Stub<Address<? extends Supplier>> var_149 = buildable.buildInjectivityChecker(var_148, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_150 = buildable.buildInjectivityChecker(var_149, 1, new int[] {3});
		final Stub<Address<? extends Supplier>> var_151 = buildable.buildInjectivityChecker(var_150, 0, new int[] {3});
		final Object var_152 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_153 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_152);
		final TupleMask var_154 = new TupleMask(new int[] {2}, 4);
		final TupleMask var_155 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_156 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_157 = buildable.buildBetaNode(var_151, var_153, var_154, var_155, var_156, false);
		final Stub<Address<? extends Supplier>> var_158 = buildable.buildInjectivityChecker(var_157, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_159 = buildable.buildInjectivityChecker(var_158, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_160 = buildable.buildInjectivityChecker(var_159, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_161 = buildable.buildInjectivityChecker(var_160, 4, new int[] {3});
		final TupleMask var_162 = new TupleMask(new int[] {3, 2, 4}, 5);
		final Stub<Address<? extends Supplier>> var_163 = buildable.buildTrimmer(var_161, var_162);
		buildable.buildConnection(var_163, var_126);
		return var_126;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.userRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("OPERATION", 1);
			posMapping.put("OBJECT", 2);

		}
		return posMapping;
	}
}
