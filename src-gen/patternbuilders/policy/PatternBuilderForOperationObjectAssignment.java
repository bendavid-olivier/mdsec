/*******************************************************************************
 * Pattern builder for pattern policy.OperationObjectAssignment
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.OperationObjectAssignment
 */
public class PatternBuilderForOperationObjectAssignment implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.OperationObjectAssignment".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.OperationObjectAssignment");
		
		final Address<? extends Receiver> var_68 = buildable.patternCollector("policy.OperationObjectAssignment");
		final Stub<Address<? extends Supplier>> var_69 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_70 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_71 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPE", "OBJ"}), var_70);
		final TupleMask var_72 = new TupleMask(new int[] {}, 0);
		final TupleMask var_73 = new TupleMask(new int[] {}, 2);
		final TupleMask var_74 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_75 = buildable.buildBetaNode(var_69, var_71, var_72, var_73, var_74, false);
		final Stub<Address<? extends Supplier>> var_76 = buildable.buildInjectivityChecker(var_75, 1, new int[] {0});
		final Object var_77 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_78 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERM", "OPE"}), var_77);
		final TupleMask var_79 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_80 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_81 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_82 = buildable.buildBetaNode(var_76, var_78, var_79, var_80, var_81, false);
		final Stub<Address<? extends Supplier>> var_83 = buildable.buildInjectivityChecker(var_82, 1, new int[] {2});
		final Stub<Address<? extends Supplier>> var_84 = buildable.buildInjectivityChecker(var_83, 0, new int[] {2});
		final TupleMask var_85 = new TupleMask(new int[] {2, 0, 1}, 3);
		final Stub<Address<? extends Supplier>> var_86 = buildable.buildTrimmer(var_84, var_85);
		buildable.buildConnection(var_86, var_68);
		return var_68;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.OperationObjectAssignment".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("PERM", 0);
			posMapping.put("OPE", 1);
			posMapping.put("OBJ", 2);

		}
		return posMapping;
	}
}
