/*******************************************************************************
 * Pattern builder for pattern policy.userFullRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.userFullRule
 */
public class PatternBuilderForuserFullRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.userFullRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.userFullRule");
		
		final Address<? extends Receiver> var_10 = buildable.patternCollector("policy.userFullRule");
		final Stub<Address<? extends Supplier>> var_11 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_12 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_13 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_12);
		final TupleMask var_14 = new TupleMask(new int[] {}, 0);
		final TupleMask var_15 = new TupleMask(new int[] {}, 2);
		final TupleMask var_16 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_17 = buildable.buildBetaNode(var_11, var_13, var_14, var_15, var_16, false);
		final Stub<Address<? extends Supplier>> var_18 = buildable.buildInjectivityChecker(var_17, 1, new int[] {0});
		final Object var_19 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_20 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_19);
		final TupleMask var_21 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_22 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_23 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_24 = buildable.buildBetaNode(var_18, var_20, var_21, var_22, var_23, false);
		final Stub<Address<? extends Supplier>> var_25 = buildable.buildInjectivityChecker(var_24, 1, new int[] {2});
		final Stub<Address<? extends Supplier>> var_26 = buildable.buildInjectivityChecker(var_25, 0, new int[] {2});
		final Object var_27 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_28 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_27);
		final TupleMask var_29 = new TupleMask(new int[] {1}, 3);
		final TupleMask var_30 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_31 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_32 = buildable.buildBetaNode(var_26, var_28, var_29, var_30, var_31, false);
		final Stub<Address<? extends Supplier>> var_33 = buildable.buildInjectivityChecker(var_32, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_34 = buildable.buildInjectivityChecker(var_33, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_35 = buildable.buildInjectivityChecker(var_34, 3, new int[] {2});
		final Object var_36 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_37 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_36);
		final TupleMask var_38 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_39 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_40 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_41 = buildable.buildBetaNode(var_35, var_37, var_38, var_39, var_40, false);
		final Stub<Address<? extends Supplier>> var_42 = buildable.buildInjectivityChecker(var_41, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_43 = buildable.buildInjectivityChecker(var_42, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_44 = buildable.buildInjectivityChecker(var_43, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_45 = buildable.buildInjectivityChecker(var_44, 4, new int[] {2});
		final TupleMask var_46 = new TupleMask(new int[] {2, 0, 1, 3, 4}, 5);
		final Stub<Address<? extends Supplier>> var_47 = buildable.buildTrimmer(var_45, var_46);
		buildable.buildConnection(var_47, var_10);
		return var_10;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.userFullRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("ROLE", 1);
			posMapping.put("PERMISSION", 2);
			posMapping.put("OPERATION", 3);
			posMapping.put("OBJECT", 4);

		}
		return posMapping;
	}
}
