/*******************************************************************************
 * Pattern builder for pattern kevoree.threeBuyers
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.kevoree;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern kevoree.threeBuyers
 */
public class PatternBuilderForthreeBuyers implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("kevoree.threeBuyers".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("kevoree.threeBuyers");
		
		final Address<? extends Receiver> var_394 = buildable.patternCollector("kevoree.threeBuyers");
		final Stub<Address<? extends Supplier>> var_395 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_396 = EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("TypeDefinition");
		final Stub<Address<? extends Supplier>> var_397 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"TYPDEF2"}), var_396);
		final TupleMask var_398 = new TupleMask(new int[] {}, 0);
		final TupleMask var_399 = new TupleMask(new int[] {}, 1);
		final TupleMask var_400 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_401 = buildable.buildBetaNode(var_395, var_397, var_398, var_399, var_400, false);
		final Object var_402 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_403 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF2", "TYPNAME2"}), var_402);
		final TupleMask var_404 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_405 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_406 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_407 = buildable.buildBetaNode(var_401, var_403, var_404, var_405, var_406, false);
		final Stub<Address<? extends Supplier>> var_408 = buildable.buildInjectivityChecker(var_407, 0, new int[] {1});
		final AbstractEvaluator var_409 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"Buyer");
			}
		};
		final Stub<Address<? extends Supplier>> var_410 = buildable.buildPredicateChecker(var_409, null, new int[] {1}, var_408);
		final Object var_411 = EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("TypeDefinition");
		final Stub<Address<? extends Supplier>> var_412 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"TYPDEF3"}), var_411);
		final TupleMask var_413 = new TupleMask(new int[] {}, 2);
		final TupleMask var_414 = new TupleMask(new int[] {}, 1);
		final TupleMask var_415 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_416 = buildable.buildBetaNode(var_410, var_412, var_413, var_414, var_415, false);
		final Stub<Address<? extends Supplier>> var_417 = buildable.buildInjectivityChecker(var_416, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_418 = buildable.buildInjectivityChecker(var_417, 2, new int[] {1});
		final Object var_419 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_420 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF3", "TYPNAME3"}), var_419);
		final TupleMask var_421 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_422 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_423 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_424 = buildable.buildBetaNode(var_418, var_420, var_421, var_422, var_423, false);
		final Stub<Address<? extends Supplier>> var_425 = buildable.buildInjectivityChecker(var_424, 0, new int[] {3});
		final Stub<Address<? extends Supplier>> var_426 = buildable.buildInjectivityChecker(var_425, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_427 = buildable.buildInjectivityChecker(var_426, 1, new int[] {3});
		final AbstractEvaluator var_428 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(3).toString(),"Buyer");
			}
		};
		final Stub<Address<? extends Supplier>> var_429 = buildable.buildPredicateChecker(var_428, null, new int[] {3}, var_427);
		final Object var_430 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_431 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF1", "TYPNAME1"}), var_430);
		final TupleMask var_432 = new TupleMask(new int[] {}, 4);
		final TupleMask var_433 = new TupleMask(new int[] {}, 2);
		final TupleMask var_434 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_435 = buildable.buildBetaNode(var_429, var_431, var_432, var_433, var_434, false);
		final Stub<Address<? extends Supplier>> var_436 = buildable.buildInjectivityChecker(var_435, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_437 = buildable.buildInjectivityChecker(var_436, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_438 = buildable.buildInjectivityChecker(var_437, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_439 = buildable.buildInjectivityChecker(var_438, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_440 = buildable.buildInjectivityChecker(var_439, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_441 = buildable.buildInjectivityChecker(var_440, 0, new int[] {5});
		final Stub<Address<? extends Supplier>> var_442 = buildable.buildInjectivityChecker(var_441, 2, new int[] {5});
		final Stub<Address<? extends Supplier>> var_443 = buildable.buildInjectivityChecker(var_442, 5, new int[] {1});
		final Stub<Address<? extends Supplier>> var_444 = buildable.buildInjectivityChecker(var_443, 5, new int[] {3});
		final AbstractEvaluator var_445 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(5).toString(),"Buyer");
			}
		};
		final Stub<Address<? extends Supplier>> var_446 = buildable.buildPredicateChecker(var_445, null, new int[] {5}, var_444);
		final Object var_447 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_448 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C1", "TYPDEF1"}), var_447);
		final TupleMask var_449 = new TupleMask(new int[] {4}, 6);
		final TupleMask var_450 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_451 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_452 = buildable.buildBetaNode(var_446, var_448, var_449, var_450, var_451, false);
		final Stub<Address<? extends Supplier>> var_453 = buildable.buildInjectivityChecker(var_452, 6, new int[] {4});
		final Stub<Address<? extends Supplier>> var_454 = buildable.buildInjectivityChecker(var_453, 6, new int[] {0});
		final Stub<Address<? extends Supplier>> var_455 = buildable.buildInjectivityChecker(var_454, 6, new int[] {2});
		final Stub<Address<? extends Supplier>> var_456 = buildable.buildInjectivityChecker(var_455, 6, new int[] {5});
		final Stub<Address<? extends Supplier>> var_457 = buildable.buildInjectivityChecker(var_456, 6, new int[] {1});
		final Stub<Address<? extends Supplier>> var_458 = buildable.buildInjectivityChecker(var_457, 6, new int[] {3});
		final Object var_459 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_460 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C2", "TYPDEF1"}), var_459);
		final TupleMask var_461 = new TupleMask(new int[] {4}, 7);
		final TupleMask var_462 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_463 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_464 = buildable.buildBetaNode(var_458, var_460, var_461, var_462, var_463, false);
		final Stub<Address<? extends Supplier>> var_465 = buildable.buildInjectivityChecker(var_464, 6, new int[] {7});
		final Stub<Address<? extends Supplier>> var_466 = buildable.buildInjectivityChecker(var_465, 7, new int[] {4});
		final Stub<Address<? extends Supplier>> var_467 = buildable.buildInjectivityChecker(var_466, 7, new int[] {0});
		final Stub<Address<? extends Supplier>> var_468 = buildable.buildInjectivityChecker(var_467, 7, new int[] {2});
		final Stub<Address<? extends Supplier>> var_469 = buildable.buildInjectivityChecker(var_468, 7, new int[] {5});
		final Stub<Address<? extends Supplier>> var_470 = buildable.buildInjectivityChecker(var_469, 7, new int[] {1});
		final Stub<Address<? extends Supplier>> var_471 = buildable.buildInjectivityChecker(var_470, 7, new int[] {3});
		final Object var_472 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_473 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C3", "TYPDEF1"}), var_472);
		final TupleMask var_474 = new TupleMask(new int[] {4}, 8);
		final TupleMask var_475 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_476 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_477 = buildable.buildBetaNode(var_471, var_473, var_474, var_475, var_476, false);
		final Stub<Address<? extends Supplier>> var_478 = buildable.buildInjectivityChecker(var_477, 6, new int[] {8});
		final Stub<Address<? extends Supplier>> var_479 = buildable.buildInjectivityChecker(var_478, 7, new int[] {8});
		final Stub<Address<? extends Supplier>> var_480 = buildable.buildInjectivityChecker(var_479, 8, new int[] {4});
		final Stub<Address<? extends Supplier>> var_481 = buildable.buildInjectivityChecker(var_480, 8, new int[] {0});
		final Stub<Address<? extends Supplier>> var_482 = buildable.buildInjectivityChecker(var_481, 8, new int[] {2});
		final Stub<Address<? extends Supplier>> var_483 = buildable.buildInjectivityChecker(var_482, 8, new int[] {5});
		final Stub<Address<? extends Supplier>> var_484 = buildable.buildInjectivityChecker(var_483, 8, new int[] {1});
		final Stub<Address<? extends Supplier>> var_485 = buildable.buildInjectivityChecker(var_484, 8, new int[] {3});
		final Object var_486 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_487 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N1", "C1"}), var_486);
		final TupleMask var_488 = new TupleMask(new int[] {6}, 9);
		final TupleMask var_489 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_490 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_491 = buildable.buildBetaNode(var_485, var_487, var_488, var_489, var_490, false);
		final Stub<Address<? extends Supplier>> var_492 = buildable.buildInjectivityChecker(var_491, 6, new int[] {9});
		final Stub<Address<? extends Supplier>> var_493 = buildable.buildInjectivityChecker(var_492, 7, new int[] {9});
		final Stub<Address<? extends Supplier>> var_494 = buildable.buildInjectivityChecker(var_493, 8, new int[] {9});
		final Stub<Address<? extends Supplier>> var_495 = buildable.buildInjectivityChecker(var_494, 9, new int[] {4});
		final Stub<Address<? extends Supplier>> var_496 = buildable.buildInjectivityChecker(var_495, 9, new int[] {0});
		final Stub<Address<? extends Supplier>> var_497 = buildable.buildInjectivityChecker(var_496, 9, new int[] {2});
		final Stub<Address<? extends Supplier>> var_498 = buildable.buildInjectivityChecker(var_497, 9, new int[] {5});
		final Stub<Address<? extends Supplier>> var_499 = buildable.buildInjectivityChecker(var_498, 9, new int[] {1});
		final Stub<Address<? extends Supplier>> var_500 = buildable.buildInjectivityChecker(var_499, 9, new int[] {3});
		final Object var_501 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_502 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N2", "C2"}), var_501);
		final TupleMask var_503 = new TupleMask(new int[] {7}, 10);
		final TupleMask var_504 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_505 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_506 = buildable.buildBetaNode(var_500, var_502, var_503, var_504, var_505, false);
		final Stub<Address<? extends Supplier>> var_507 = buildable.buildInjectivityChecker(var_506, 6, new int[] {10});
		final Stub<Address<? extends Supplier>> var_508 = buildable.buildInjectivityChecker(var_507, 7, new int[] {10});
		final Stub<Address<? extends Supplier>> var_509 = buildable.buildInjectivityChecker(var_508, 8, new int[] {10});
		final Stub<Address<? extends Supplier>> var_510 = buildable.buildInjectivityChecker(var_509, 9, new int[] {10});
		final Stub<Address<? extends Supplier>> var_511 = buildable.buildInjectivityChecker(var_510, 10, new int[] {4});
		final Stub<Address<? extends Supplier>> var_512 = buildable.buildInjectivityChecker(var_511, 10, new int[] {0});
		final Stub<Address<? extends Supplier>> var_513 = buildable.buildInjectivityChecker(var_512, 10, new int[] {2});
		final Stub<Address<? extends Supplier>> var_514 = buildable.buildInjectivityChecker(var_513, 10, new int[] {5});
		final Stub<Address<? extends Supplier>> var_515 = buildable.buildInjectivityChecker(var_514, 10, new int[] {1});
		final Stub<Address<? extends Supplier>> var_516 = buildable.buildInjectivityChecker(var_515, 10, new int[] {3});
		final Object var_517 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_518 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N3", "C3"}), var_517);
		final TupleMask var_519 = new TupleMask(new int[] {8}, 11);
		final TupleMask var_520 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_521 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_522 = buildable.buildBetaNode(var_516, var_518, var_519, var_520, var_521, false);
		final Stub<Address<? extends Supplier>> var_523 = buildable.buildInjectivityChecker(var_522, 6, new int[] {11});
		final Stub<Address<? extends Supplier>> var_524 = buildable.buildInjectivityChecker(var_523, 7, new int[] {11});
		final Stub<Address<? extends Supplier>> var_525 = buildable.buildInjectivityChecker(var_524, 8, new int[] {11});
		final Stub<Address<? extends Supplier>> var_526 = buildable.buildInjectivityChecker(var_525, 9, new int[] {11});
		final Stub<Address<? extends Supplier>> var_527 = buildable.buildInjectivityChecker(var_526, 10, new int[] {11});
		final Stub<Address<? extends Supplier>> var_528 = buildable.buildInjectivityChecker(var_527, 11, new int[] {4});
		final Stub<Address<? extends Supplier>> var_529 = buildable.buildInjectivityChecker(var_528, 11, new int[] {0});
		final Stub<Address<? extends Supplier>> var_530 = buildable.buildInjectivityChecker(var_529, 11, new int[] {2});
		final Stub<Address<? extends Supplier>> var_531 = buildable.buildInjectivityChecker(var_530, 11, new int[] {5});
		final Stub<Address<? extends Supplier>> var_532 = buildable.buildInjectivityChecker(var_531, 11, new int[] {1});
		final Stub<Address<? extends Supplier>> var_533 = buildable.buildInjectivityChecker(var_532, 11, new int[] {3});
		final TupleMask var_534 = new TupleMask(new int[] {9, 6, 10, 7, 11, 8}, 12);
		final Stub<Address<? extends Supplier>> var_535 = buildable.buildTrimmer(var_533, var_534);
		buildable.buildConnection(var_535, var_394);
		return var_394;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("kevoree.threeBuyers".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N1", 0);
			posMapping.put("C1", 1);
			posMapping.put("N2", 2);
			posMapping.put("C2", 3);
			posMapping.put("N3", 4);
			posMapping.put("C3", 5);

		}
		return posMapping;
	}
}
