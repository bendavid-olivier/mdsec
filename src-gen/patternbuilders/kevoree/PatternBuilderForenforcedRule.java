/*******************************************************************************
 * Pattern builder for pattern kevoree.enforcedRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.kevoree;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern kevoree.enforcedRule
 */
public class PatternBuilderForenforcedRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("kevoree.enforcedRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("kevoree.enforcedRule");
		
		final Address<? extends Receiver> var_0 = buildable.patternCollector("kevoree.enforcedRule");
		final Stub<Address<? extends Supplier>> var_1 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_2 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_3 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N1", "COMP1"}), var_2);
		final TupleMask var_4 = new TupleMask(new int[] {}, 0);
		final TupleMask var_5 = new TupleMask(new int[] {}, 2);
		final TupleMask var_6 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_7 = buildable.buildBetaNode(var_1, var_3, var_4, var_5, var_6, false);
		final Stub<Address<? extends Supplier>> var_8 = buildable.buildInjectivityChecker(var_7, 1, new int[] {0});
		final Object var_9 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_10 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"COMP1", "PORT1"}), var_9);
		final TupleMask var_11 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_12 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_13 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_14 = buildable.buildBetaNode(var_8, var_10, var_11, var_12, var_13, false);
		final Stub<Address<? extends Supplier>> var_15 = buildable.buildInjectivityChecker(var_14, 1, new int[] {2});
		final Stub<Address<? extends Supplier>> var_16 = buildable.buildInjectivityChecker(var_15, 0, new int[] {2});
		final Object var_17 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_18 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BIND1", "PORT1"}), var_17);
		final TupleMask var_19 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_20 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_21 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_22 = buildable.buildBetaNode(var_16, var_18, var_19, var_20, var_21, false);
		final Stub<Address<? extends Supplier>> var_23 = buildable.buildInjectivityChecker(var_22, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_24 = buildable.buildInjectivityChecker(var_23, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_25 = buildable.buildInjectivityChecker(var_24, 3, new int[] {2});
		final Object var_26 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_27 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BIND1", "CHAN"}), var_26);
		final TupleMask var_28 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_29 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_30 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_31 = buildable.buildBetaNode(var_25, var_27, var_28, var_29, var_30, false);
		final Stub<Address<? extends Supplier>> var_32 = buildable.buildInjectivityChecker(var_31, 3, new int[] {4});
		final Stub<Address<? extends Supplier>> var_33 = buildable.buildInjectivityChecker(var_32, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_34 = buildable.buildInjectivityChecker(var_33, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_35 = buildable.buildInjectivityChecker(var_34, 4, new int[] {2});
		final Object var_36 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_37 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BIND2", "CHAN"}), var_36);
		final TupleMask var_38 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_39 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_40 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_41 = buildable.buildBetaNode(var_35, var_37, var_38, var_39, var_40, false);
		final Stub<Address<? extends Supplier>> var_42 = buildable.buildInjectivityChecker(var_41, 3, new int[] {5});
		final Stub<Address<? extends Supplier>> var_43 = buildable.buildInjectivityChecker(var_42, 5, new int[] {4});
		final Stub<Address<? extends Supplier>> var_44 = buildable.buildInjectivityChecker(var_43, 5, new int[] {1});
		final Stub<Address<? extends Supplier>> var_45 = buildable.buildInjectivityChecker(var_44, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_46 = buildable.buildInjectivityChecker(var_45, 5, new int[] {2});
		final Object var_47 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_48 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BIND2", "PORT2"}), var_47);
		final TupleMask var_49 = new TupleMask(new int[] {5}, 6);
		final TupleMask var_50 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_51 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_52 = buildable.buildBetaNode(var_46, var_48, var_49, var_50, var_51, false);
		final Stub<Address<? extends Supplier>> var_53 = buildable.buildInjectivityChecker(var_52, 3, new int[] {6});
		final Stub<Address<? extends Supplier>> var_54 = buildable.buildInjectivityChecker(var_53, 5, new int[] {6});
		final Stub<Address<? extends Supplier>> var_55 = buildable.buildInjectivityChecker(var_54, 4, new int[] {6});
		final Stub<Address<? extends Supplier>> var_56 = buildable.buildInjectivityChecker(var_55, 1, new int[] {6});
		final Stub<Address<? extends Supplier>> var_57 = buildable.buildInjectivityChecker(var_56, 0, new int[] {6});
		final Stub<Address<? extends Supplier>> var_58 = buildable.buildInjectivityChecker(var_57, 2, new int[] {6});
		final Object var_59 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("provided");
		final Stub<Address<? extends Supplier>> var_60 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"COMP2", "PORT2"}), var_59);
		final TupleMask var_61 = new TupleMask(new int[] {6}, 7);
		final TupleMask var_62 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_63 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_64 = buildable.buildBetaNode(var_58, var_60, var_61, var_62, var_63, false);
		final Stub<Address<? extends Supplier>> var_65 = buildable.buildInjectivityChecker(var_64, 3, new int[] {7});
		final Stub<Address<? extends Supplier>> var_66 = buildable.buildInjectivityChecker(var_65, 5, new int[] {7});
		final Stub<Address<? extends Supplier>> var_67 = buildable.buildInjectivityChecker(var_66, 4, new int[] {7});
		final Stub<Address<? extends Supplier>> var_68 = buildable.buildInjectivityChecker(var_67, 1, new int[] {7});
		final Stub<Address<? extends Supplier>> var_69 = buildable.buildInjectivityChecker(var_68, 7, new int[] {0});
		final Stub<Address<? extends Supplier>> var_70 = buildable.buildInjectivityChecker(var_69, 7, new int[] {2});
		final Stub<Address<? extends Supplier>> var_71 = buildable.buildInjectivityChecker(var_70, 7, new int[] {6});
		final Object var_72 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_73 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N2", "COMP2"}), var_72);
		final TupleMask var_74 = new TupleMask(new int[] {7}, 8);
		final TupleMask var_75 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_76 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_77 = buildable.buildBetaNode(var_71, var_73, var_74, var_75, var_76, false);
		final Stub<Address<? extends Supplier>> var_78 = buildable.buildInjectivityChecker(var_77, 3, new int[] {8});
		final Stub<Address<? extends Supplier>> var_79 = buildable.buildInjectivityChecker(var_78, 5, new int[] {8});
		final Stub<Address<? extends Supplier>> var_80 = buildable.buildInjectivityChecker(var_79, 4, new int[] {8});
		final Stub<Address<? extends Supplier>> var_81 = buildable.buildInjectivityChecker(var_80, 1, new int[] {8});
		final Stub<Address<? extends Supplier>> var_82 = buildable.buildInjectivityChecker(var_81, 7, new int[] {8});
		final Stub<Address<? extends Supplier>> var_83 = buildable.buildInjectivityChecker(var_82, 0, new int[] {8});
		final Stub<Address<? extends Supplier>> var_84 = buildable.buildInjectivityChecker(var_83, 8, new int[] {2});
		final Stub<Address<? extends Supplier>> var_85 = buildable.buildInjectivityChecker(var_84, 8, new int[] {6});
		final TupleMask var_86 = new TupleMask(new int[] {0, 1, 2, 3, 4, 8, 7, 6, 5}, 9);
		final Stub<Address<? extends Supplier>> var_87 = buildable.buildTrimmer(var_85, var_86);
		buildable.buildConnection(var_87, var_0);
		return var_0;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("kevoree.enforcedRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N1", 0);
			posMapping.put("COMP1", 1);
			posMapping.put("PORT1", 2);
			posMapping.put("BIND1", 3);
			posMapping.put("CHAN", 4);
			posMapping.put("N2", 5);
			posMapping.put("COMP2", 6);
			posMapping.put("PORT2", 7);
			posMapping.put("BIND2", 8);

		}
		return posMapping;
	}
}
