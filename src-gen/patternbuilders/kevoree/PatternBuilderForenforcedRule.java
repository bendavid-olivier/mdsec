/*******************************************************************************
 * Pattern builder for pattern kevoree.enforcedRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.kevoree;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern kevoree.enforcedRule
 */
public class PatternBuilderForenforcedRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("kevoree.enforcedRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("kevoree.enforcedRule");
		
		final Address<? extends Receiver> var_146 = buildable.patternCollector("kevoree.enforcedRule");
		final Stub<Address<? extends Supplier>> var_147 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_148 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_149 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BIND1", "PORT1"}), var_148);
		final TupleMask var_150 = new TupleMask(new int[] {}, 0);
		final TupleMask var_151 = new TupleMask(new int[] {}, 2);
		final TupleMask var_152 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_153 = buildable.buildBetaNode(var_147, var_149, var_150, var_151, var_152, false);
		final Stub<Address<? extends Supplier>> var_154 = buildable.buildInjectivityChecker(var_153, 0, new int[] {1});
		final Object var_155 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_156 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BIND1", "CHAN"}), var_155);
		final TupleMask var_157 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_158 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_159 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_160 = buildable.buildBetaNode(var_154, var_156, var_157, var_158, var_159, false);
		final Stub<Address<? extends Supplier>> var_161 = buildable.buildInjectivityChecker(var_160, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_162 = buildable.buildInjectivityChecker(var_161, 2, new int[] {1});
		final Object var_163 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_164 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BIND2", "CHAN"}), var_163);
		final TupleMask var_165 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_166 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_167 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_168 = buildable.buildBetaNode(var_162, var_164, var_165, var_166, var_167, false);
		final Stub<Address<? extends Supplier>> var_169 = buildable.buildInjectivityChecker(var_168, 0, new int[] {3});
		final Stub<Address<? extends Supplier>> var_170 = buildable.buildInjectivityChecker(var_169, 3, new int[] {2});
		final Stub<Address<? extends Supplier>> var_171 = buildable.buildInjectivityChecker(var_170, 3, new int[] {1});
		final Object var_172 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_173 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BIND2", "PORT2"}), var_172);
		final TupleMask var_174 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_175 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_176 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_177 = buildable.buildBetaNode(var_171, var_173, var_174, var_175, var_176, false);
		final Stub<Address<? extends Supplier>> var_178 = buildable.buildInjectivityChecker(var_177, 0, new int[] {4});
		final Stub<Address<? extends Supplier>> var_179 = buildable.buildInjectivityChecker(var_178, 3, new int[] {4});
		final Stub<Address<? extends Supplier>> var_180 = buildable.buildInjectivityChecker(var_179, 2, new int[] {4});
		final Stub<Address<? extends Supplier>> var_181 = buildable.buildInjectivityChecker(var_180, 1, new int[] {4});
		final Object var_182 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("provided");
		final Stub<Address<? extends Supplier>> var_183 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"COMP2", "PORT2"}), var_182);
		final TupleMask var_184 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_185 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_186 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_187 = buildable.buildBetaNode(var_181, var_183, var_184, var_185, var_186, false);
		final Stub<Address<? extends Supplier>> var_188 = buildable.buildInjectivityChecker(var_187, 0, new int[] {5});
		final Stub<Address<? extends Supplier>> var_189 = buildable.buildInjectivityChecker(var_188, 3, new int[] {5});
		final Stub<Address<? extends Supplier>> var_190 = buildable.buildInjectivityChecker(var_189, 2, new int[] {5});
		final Stub<Address<? extends Supplier>> var_191 = buildable.buildInjectivityChecker(var_190, 5, new int[] {1});
		final Stub<Address<? extends Supplier>> var_192 = buildable.buildInjectivityChecker(var_191, 5, new int[] {4});
		final Object var_193 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_194 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N2", "COMP2"}), var_193);
		final TupleMask var_195 = new TupleMask(new int[] {5}, 6);
		final TupleMask var_196 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_197 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_198 = buildable.buildBetaNode(var_192, var_194, var_195, var_196, var_197, false);
		final Stub<Address<? extends Supplier>> var_199 = buildable.buildInjectivityChecker(var_198, 0, new int[] {6});
		final Stub<Address<? extends Supplier>> var_200 = buildable.buildInjectivityChecker(var_199, 3, new int[] {6});
		final Stub<Address<? extends Supplier>> var_201 = buildable.buildInjectivityChecker(var_200, 2, new int[] {6});
		final Stub<Address<? extends Supplier>> var_202 = buildable.buildInjectivityChecker(var_201, 5, new int[] {6});
		final Stub<Address<? extends Supplier>> var_203 = buildable.buildInjectivityChecker(var_202, 6, new int[] {1});
		final Stub<Address<? extends Supplier>> var_204 = buildable.buildInjectivityChecker(var_203, 6, new int[] {4});
		final Object var_205 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_206 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"COMP1", "PORT1"}), var_205);
		final TupleMask var_207 = new TupleMask(new int[] {1}, 7);
		final TupleMask var_208 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_209 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_210 = buildable.buildBetaNode(var_204, var_206, var_207, var_208, var_209, false);
		final Stub<Address<? extends Supplier>> var_211 = buildable.buildInjectivityChecker(var_210, 0, new int[] {7});
		final Stub<Address<? extends Supplier>> var_212 = buildable.buildInjectivityChecker(var_211, 3, new int[] {7});
		final Stub<Address<? extends Supplier>> var_213 = buildable.buildInjectivityChecker(var_212, 2, new int[] {7});
		final Stub<Address<? extends Supplier>> var_214 = buildable.buildInjectivityChecker(var_213, 7, new int[] {5});
		final Stub<Address<? extends Supplier>> var_215 = buildable.buildInjectivityChecker(var_214, 7, new int[] {6});
		final Stub<Address<? extends Supplier>> var_216 = buildable.buildInjectivityChecker(var_215, 7, new int[] {1});
		final Stub<Address<? extends Supplier>> var_217 = buildable.buildInjectivityChecker(var_216, 7, new int[] {4});
		final Object var_218 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_219 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N1", "COMP1"}), var_218);
		final TupleMask var_220 = new TupleMask(new int[] {7}, 8);
		final TupleMask var_221 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_222 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_223 = buildable.buildBetaNode(var_217, var_219, var_220, var_221, var_222, false);
		final Stub<Address<? extends Supplier>> var_224 = buildable.buildInjectivityChecker(var_223, 0, new int[] {8});
		final Stub<Address<? extends Supplier>> var_225 = buildable.buildInjectivityChecker(var_224, 3, new int[] {8});
		final Stub<Address<? extends Supplier>> var_226 = buildable.buildInjectivityChecker(var_225, 2, new int[] {8});
		final Stub<Address<? extends Supplier>> var_227 = buildable.buildInjectivityChecker(var_226, 7, new int[] {8});
		final Stub<Address<? extends Supplier>> var_228 = buildable.buildInjectivityChecker(var_227, 5, new int[] {8});
		final Stub<Address<? extends Supplier>> var_229 = buildable.buildInjectivityChecker(var_228, 8, new int[] {6});
		final Stub<Address<? extends Supplier>> var_230 = buildable.buildInjectivityChecker(var_229, 8, new int[] {1});
		final Stub<Address<? extends Supplier>> var_231 = buildable.buildInjectivityChecker(var_230, 8, new int[] {4});
		final TupleMask var_232 = new TupleMask(new int[] {8, 7, 1, 0, 2, 6, 5, 4, 3}, 9);
		final Stub<Address<? extends Supplier>> var_233 = buildable.buildTrimmer(var_231, var_232);
		buildable.buildConnection(var_233, var_146);
		return var_146;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("kevoree.enforcedRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N1", 0);
			posMapping.put("COMP1", 1);
			posMapping.put("PORT1", 2);
			posMapping.put("BIND1", 3);
			posMapping.put("CHAN", 4);
			posMapping.put("N2", 5);
			posMapping.put("COMP2", 6);
			posMapping.put("PORT2", 7);
			posMapping.put("BIND2", 8);

		}
		return posMapping;
	}
}
