/*******************************************************************************
 * Pattern builder for pattern kevoree.connection
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.kevoree;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern kevoree.connection
 */
public class PatternBuilderForconnection implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("kevoree.connection".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("kevoree.connection");
		
		final Address<? extends Receiver> var_584 = buildable.patternCollector("kevoree.connection");
		final Stub<Address<? extends Supplier>> var_585 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_586 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_587 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_586);
		final TupleMask var_588 = new TupleMask(new int[] {}, 0);
		final TupleMask var_589 = new TupleMask(new int[] {}, 2);
		final TupleMask var_590 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_591 = buildable.buildBetaNode(var_585, var_587, var_588, var_589, var_590, false);
		final Stub<Address<? extends Supplier>> var_592 = buildable.buildInjectivityChecker(var_591, 1, new int[] {0});
		final Object var_593 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_594 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "P"}), var_593);
		final TupleMask var_595 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_596 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_597 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_598 = buildable.buildBetaNode(var_592, var_594, var_595, var_596, var_597, false);
		final Stub<Address<? extends Supplier>> var_599 = buildable.buildInjectivityChecker(var_598, 1, new int[] {2});
		final Stub<Address<? extends Supplier>> var_600 = buildable.buildInjectivityChecker(var_599, 0, new int[] {2});
		final Object var_601 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_602 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "P"}), var_601);
		final TupleMask var_603 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_604 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_605 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_606 = buildable.buildBetaNode(var_600, var_602, var_603, var_604, var_605, false);
		final Stub<Address<? extends Supplier>> var_607 = buildable.buildInjectivityChecker(var_606, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_608 = buildable.buildInjectivityChecker(var_607, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_609 = buildable.buildInjectivityChecker(var_608, 3, new int[] {2});
		final Object var_610 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_611 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "CHA"}), var_610);
		final TupleMask var_612 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_613 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_614 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_615 = buildable.buildBetaNode(var_609, var_611, var_612, var_613, var_614, false);
		final Stub<Address<? extends Supplier>> var_616 = buildable.buildInjectivityChecker(var_615, 3, new int[] {4});
		final Stub<Address<? extends Supplier>> var_617 = buildable.buildInjectivityChecker(var_616, 1, new int[] {4});
		final Stub<Address<? extends Supplier>> var_618 = buildable.buildInjectivityChecker(var_617, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_619 = buildable.buildInjectivityChecker(var_618, 4, new int[] {2});
		final TupleMask var_620 = new TupleMask(new int[] {0, 1, 2, 3}, 5);
		final Stub<Address<? extends Supplier>> var_621 = buildable.buildTrimmer(var_619, var_620);
		buildable.buildConnection(var_621, var_584);
		return var_584;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("kevoree.connection".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);
			posMapping.put("C", 1);
			posMapping.put("P", 2);
			posMapping.put("B", 3);

		}
		return posMapping;
	}
}
