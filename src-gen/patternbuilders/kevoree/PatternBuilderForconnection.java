/*******************************************************************************
 * Pattern builder for pattern kevoree.connection
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.kevoree;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern kevoree.connection
 */
public class PatternBuilderForconnection implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("kevoree.connection".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("kevoree.connection");
		
		final Address<? extends Receiver> var_302 = buildable.patternCollector("kevoree.connection");
		final Stub<Address<? extends Supplier>> var_303 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_304 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_305 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "P"}), var_304);
		final TupleMask var_306 = new TupleMask(new int[] {}, 0);
		final TupleMask var_307 = new TupleMask(new int[] {}, 2);
		final TupleMask var_308 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_309 = buildable.buildBetaNode(var_303, var_305, var_306, var_307, var_308, false);
		final Stub<Address<? extends Supplier>> var_310 = buildable.buildInjectivityChecker(var_309, 0, new int[] {1});
		final Object var_311 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_312 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "CHA"}), var_311);
		final TupleMask var_313 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_314 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_315 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_316 = buildable.buildBetaNode(var_310, var_312, var_313, var_314, var_315, false);
		final Stub<Address<? extends Supplier>> var_317 = buildable.buildInjectivityChecker(var_316, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_318 = buildable.buildInjectivityChecker(var_317, 2, new int[] {1});
		final Object var_319 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_320 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "P"}), var_319);
		final TupleMask var_321 = new TupleMask(new int[] {1}, 3);
		final TupleMask var_322 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_323 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_324 = buildable.buildBetaNode(var_318, var_320, var_321, var_322, var_323, false);
		final Stub<Address<? extends Supplier>> var_325 = buildable.buildInjectivityChecker(var_324, 0, new int[] {3});
		final Stub<Address<? extends Supplier>> var_326 = buildable.buildInjectivityChecker(var_325, 3, new int[] {2});
		final Stub<Address<? extends Supplier>> var_327 = buildable.buildInjectivityChecker(var_326, 3, new int[] {1});
		final Object var_328 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_329 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_328);
		final TupleMask var_330 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_331 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_332 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_333 = buildable.buildBetaNode(var_327, var_329, var_330, var_331, var_332, false);
		final Stub<Address<? extends Supplier>> var_334 = buildable.buildInjectivityChecker(var_333, 0, new int[] {4});
		final Stub<Address<? extends Supplier>> var_335 = buildable.buildInjectivityChecker(var_334, 3, new int[] {4});
		final Stub<Address<? extends Supplier>> var_336 = buildable.buildInjectivityChecker(var_335, 2, new int[] {4});
		final Stub<Address<? extends Supplier>> var_337 = buildable.buildInjectivityChecker(var_336, 4, new int[] {1});
		final TupleMask var_338 = new TupleMask(new int[] {4, 3, 1, 0}, 5);
		final Stub<Address<? extends Supplier>> var_339 = buildable.buildTrimmer(var_337, var_338);
		buildable.buildConnection(var_339, var_302);
		return var_302;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("kevoree.connection".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);
			posMapping.put("C", 1);
			posMapping.put("P", 2);
			posMapping.put("B", 3);

		}
		return posMapping;
	}
}
