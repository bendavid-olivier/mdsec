/*******************************************************************************
 * Pattern builder for pattern kevoree.nodeComponent
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.kevoree;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern kevoree.nodeComponent
 */
public class PatternBuilderFornodeComponent implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("kevoree.nodeComponent".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("kevoree.nodeComponent");
		
		final Address<? extends Receiver> var_240 = buildable.patternCollector("kevoree.nodeComponent");
		final Stub<Address<? extends Supplier>> var_241 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_242 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_243 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_242);
		final TupleMask var_244 = new TupleMask(new int[] {}, 0);
		final TupleMask var_245 = new TupleMask(new int[] {}, 2);
		final TupleMask var_246 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_247 = buildable.buildBetaNode(var_241, var_243, var_244, var_245, var_246, false);
		final Stub<Address<? extends Supplier>> var_248 = buildable.buildInjectivityChecker(var_247, 1, new int[] {0});
		final TupleMask var_249 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_250 = buildable.buildTrimmer(var_248, var_249);
		buildable.buildConnection(var_250, var_240);
		return var_240;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("kevoree.nodeComponent".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);
			posMapping.put("C", 1);

		}
		return posMapping;
	}
}
